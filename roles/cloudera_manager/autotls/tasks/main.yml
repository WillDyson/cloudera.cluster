# Copyright 2021 Cloudera, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Check Cloudera Manager version
  cloudera.cluster.cm_api:
    endpoint: /cm/version
  register: response

- fail:
    msg: This playbook requires Cloudera Manager 7.1+
  when: response.json.version is version('7.1', '<')

- fail:
    msg: >-
      You must specify autotls_host_username 
      and autotls_host_password when autotls is configured
  when: >-
    autotls_host_username is not defined
    or autotls_host_password is not defined

- fail:
    msg: >-
      You must set tls to true for each host or
      set manual_tls_cert_distribution to true if
      you are handling TLS certificate distribution
      outside of the playbook
  when:
    - not (manual_tls_cert_distribution | default (False))
    - not (tls | default(False))

- name: Check if AutoTLS is already enabled
  cloudera.cluster.cm_api:
    endpoint: /cm/config
  register: response

- set_fact:
    autotls_enabled_already: "{{ response.json | json_query(query) | default([]) | length > 0 }}"
  vars:
    query: 'items[?name == `AUTO_TLS_TYPE` && value == `ALL`]'

- block:

  - name: Create the AutoTLS directory for Cloudera Manager
    file:
      path: "{{ base_dir_security }}/autotls"
      owner: cloudera-scm
      group: cloudera-scm
      mode: '0700'
      state: directory
    when: "'cloudera_manager' in group_names"

  - name: Create a temporary location for the host keys and certificates
    tempfile:
      state: directory
      suffix: autotls
    register: autotls_temp_dir
    run_once: True
    when: "'cloudera_manager' in group_names"

  - name: Copy the host certificate
    slurp:
      src: "{{ tls_cert_path }}"
    register: host_certificate

  - name: Copy the host key
    slurp:
      src: "{{ tls_key_path }}"
    register: host_key

  - name: Write the host certificate to the temporary directory
    copy:
      content: "{{ host_certificate['content'] | b64decode }}"
      dest: "{{ autotls_temp_dir.path }}/{{ inventory_hostname }}.pem"
    delegate_to: "{{ groups.cloudera_manager | first }}"

  - name: Write the host key to the temporary directory
    copy:
      content: "{{ host_key['content'] | b64decode }}"
      dest: "{{ autotls_temp_dir.path }}/{{ inventory_hostname }}.key"
    delegate_to: "{{ groups.cloudera_manager | first }}"

  - name: Copy the key password to the temporary directory
    copy:
      content: "{{ tls_key_password }}"
      dest: "{{ autotls_temp_dir.path }}/key.pw"
    when: "'cloudera_manager' in group_names"

  - name: Copy the truststore password to the temporary directory
    copy:
      content: "{{ tls_truststore_password }}"
      dest: "{{ autotls_temp_dir.path }}/truststore.pw"
    when: "'cloudera_manager' in group_names"

  - name: Copy the chain certificate to the temporary directory
    copy:
      src: "{{ tls_chain_path }}"
      dest: "{{ autotls_temp_dir.path }}/chain.pem"
      remote_src: yes
    when: "'cloudera_manager' in group_names"

  - name: Set permissions for temporary directory
    file:
      path: "{{ autotls_temp_dir.path }}"
      state: directory
      recurse: yes
      owner: cloudera-scm
      group: cloudera-scm
    when: "'cloudera_manager' in group_names"

  - name: Enable Auto-TLS
    cloudera.cluster.cm_api:
      endpoint: /cm/commands/generateCmca
      method: POST
      body: "{{ lookup('template', 'request.j2', convert_data=False) | from_yaml | to_json }}"
    run_once: True
    when: "'cloudera_manager' in group_names"

  - name: Restart Cloudera Manager Server
    service:
      name: cloudera-scm-server
      state: restarted
    notify:
      - wait cloudera-scm-server
    when: "'cloudera_manager' in group_names"

  - name: Wait for Cloudera Manager Server to come back up
    meta: flush_handlers
    when: "'cloudera_manager' in group_names"

  when: not autotls_enabled_already
